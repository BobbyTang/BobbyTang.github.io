<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BobbyTang Blog]]></title>
  <link href="http://BobbyTang.github.io/atom.xml" rel="self"/>
  <link href="http://BobbyTang.github.io/"/>
  <updated>2014-03-11T06:21:01+08:00</updated>
  <id>http://BobbyTang.github.io/</id>
  <author>
    <name><![CDATA[BobbyTang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL - SybaseASE - Alternative Way to Support LEAD/LAG Function]]></title>
    <link href="http://BobbyTang.github.io/blog/2014/03/10/sql-sybasease-alternative-way-to-support-lead-slash-lag-function/"/>
    <updated>2014-03-10T01:32:05+08:00</updated>
    <id>http://BobbyTang.github.io/blog/2014/03/10/sql-sybasease-alternative-way-to-support-lead-slash-lag-function</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL - Switch/Transpose Columns and Rows]]></title>
    <link href="http://BobbyTang.github.io/blog/2014/03/10/sql-switch-slash-transpose-columns-and-rows/"/>
    <updated>2014-03-10T00:28:27+08:00</updated>
    <id>http://BobbyTang.github.io/blog/2014/03/10/sql-switch-slash-transpose-columns-and-rows</id>
    <content type="html"><![CDATA[<p>In practice, we will meet the requirement to rotate the table including convert cols to rows, convert rows to cols. In this session, I&rsquo;ll produce the solution in common method as well as db-specified features.</p>

<h2>Convert columns to rows</h2>

<pre><code>--common solution
select * from (
    select id, 'col_1' as col_name, col_1 as col_val
    from table
    union all
    select id, 'col_2' as col_name, col_2 as col_val
    from table
    union all
    ... 
) order by id

--oracle 11g unpivot query
select *
from table
unpivot (
    col_val for col_name in (col_1 as 'col_1', col_2 as 'col_2')
)
order by id
</code></pre>

<h2>Concert rows to columns</h2>

<pre><code>--common solution
select id,
    max(case when col_name = 'col_1' then col_val else null end) as col_1,
    max(case when col_name = 'col_2' then col_val else null end) as col_2,
    ...
from table
order by id


--oracle 11g pivot query
select *
from table
pivot (
    max(col_val) for col_name in ('col_1' as col_1,'col_2' as col_2)
)
where ...
order by id
</code></pre>

<h2>Excel pivot table</h2>

<p>For non-sql approaches, we can use excel pivot table. Excel spreadsheets are a great way to pivot and analyze Oracle data, and tools.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operating System Concepts - Terminology]]></title>
    <link href="http://BobbyTang.github.io/blog/2014/03/05/operating-system-concepts-terminology/"/>
    <updated>2014-03-05T05:04:59+08:00</updated>
    <id>http://BobbyTang.github.io/blog/2014/03/05/operating-system-concepts-terminology</id>
    <content type="html"><![CDATA[<p>The aim of this post is to review the crucial terms of operating-system and basic interaction of these underlying components.
Before starting with topic, I am going to reveal why I try to read books of OS related at this point. Let me conclude the reasons, first and foremost, various applications in my daily work encounter issues that are associated with LINUX system, such as buffer size, open file limits and unable to create native threads etc. All of these issues point out to the knowledge of OS. Next, Java performance tuning is always based on the operating system concept, like memory management, cpu utilization etc. Furthermore, including all the design concepts are derived from the solution of common issue inside operating system. Due to these, it is so encouraged to read and go through operating system concept again that I could be inspired and get everything tied. If there are any findings or association with Java, I will make more explanations and comments linked with definitive resource.</p>

<h2>Storage Device Hierarchy</h2>

<p>registers &mdash; > cache &mdash; > main memory (RAM random access memory) &mdash; > electronic disk &mdash; > magnetic disk &mdash; > optical disk &mdash; > magnetic tapes</p>

<h2>Symmetric Multiprocessing (SMP)</h2>

<p>SMP systems are tightly coupled multiprocessor systems with a pool of homogeneous processors running independently, each processor executing different programs and working on different data and with capability of sharing common resources (memory, I/O device, interrupt system and so on) and connected using a system bus or a crossbar.</p>

<pre><code>uname -a
</code></pre>

<h2>Non-uniform Memory Access (NUMA)</h2>

<p>NUMA is a computer memory design used in multiprocessing, where the memory access time depends on the memory location relative to the processor. Under NUMA, a processor can access its own local memory faster than non-local memory (memory local to another processor or memory shared between processors).</p>

<h3>NUMA collector enhancements</h3>

<ul>
<li>The Parallel Scavenger garbage collector has been extended to take advantage of machines with NUMA (Non Uniform Memory Access) architecture.
The NUMA-aware allocator can be turned on with the <code>-XX:+UseNUMA</code> flag in conjunction with the selection of the Parallel Scavenger garbage collector. The Parallel Scavenger garbage collector is the default for a server-class machine. The Parallel Scavenger garbage collector can also be turned on explicitly by specifying the <code>-XX:+UseParallelGC</code> option.
If you want see the detail, please see <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html">oracle official document</a>.</li>
</ul>


<h2>Clustering</h2>

<p>Clustering can be structured asymmetrically or symmetrically. In asymmetric clustering, one machine is in hot-standby mode while the other is running the applications. The hot-standby host machine does nothing but monitor the active server. If that server fails, the hot-standby host becomes the active server. In symmetric mode, two or more hosts are running applications and are monitoring each other. This mode is obviously more efficient, as it uses all of the available hardware. It does require that more than one application be available to run.
For example in real-world scenario:
The secondary EMS server is hot-standby mode.
Two Weblogic servers are symmetric mode and load balance.</p>

<h2>Network</h2>

<h3>local area network (LAN)</h3>

<p>A local area network (LAN) is a computer network that user interconnects computers in a limited area such as a home, school, computer laboratory, or office building using network media.</p>

<h3>storage-area network(SAN)</h3>

<p>SANs are primarily used to enhance storage devices, such as disk arrays, tape libraries, and optical jukeboxes, accessible to servers so that the devices appear like locally attached devices to the operating system.</p>

<h3>wide area network (WAN)</h3>

<p>A wide area network (WAN) is a network that covers a broad area (i.e., any telecommunications network that links across metropolitan, regional, or national boundaries) using private or public network transports. WANs are often built using leased lines. WANs can also be built using less costly circuit switching or packet switching methods.</p>

<h2>Computing Environments</h2>

<h3>traditional computing</h3>

<h4>batch processing</h4>

<p>Batch systems processed jobs in bulk, with predetermined input (from files or other sources of data).</p>

<h4>time-sharing</h4>

<p>Time-sharing systems used a timer and scheduling algorithms to rapidly cycle processes through the CPU, giving each user a share of the resources.
Time-sharing systems are an extension of multiprogramming wherein CPU scheduling algorithms rapidly switch between jobs, thus providing the illusion that all jobs are running concurrently.</p>

<h3>client–Server computing</h3>

<h4>compute-server system</h4>

<h4>file-server system</h4>

<h3>peer-to-peer computing</h3>

<h3>web-based computing</h3>

<h2>System Calls</h2>

<p>In computing, a system call is how a program requests a service from an operating system&rsquo;s kernel.
System calls provide an essential interface between a process and the operating system.
System calls can be grouped roughly into six major categories: process control, file manipulation, device manipulation, information maintenance, communications, and protection.</p>

<ul>
<li>Strace is used for debugging and troubleshooting the execution of an executable on Linux environment. It displays the system calls used by the process, and the signals received by the process.</li>
</ul>


<h2>Interprocess Communication</h2>

<p>There are two common models of interprocess communication:</p>

<h3>message-passing model</h3>

<p>In the shared-memory model, processes use shared memory create and shared memory attach system calls to create and gain access to regions of memory owned by other processes.</p>

<h3>shared-memory model</h3>

<p>Message passing is useful for exchanging smaller amounts of data, because no conflicts need be avoided.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://BobbyTang.github.io/blog/2014/01/01/first-post/"/>
    <updated>2014-01-01T11:32:03+08:00</updated>
    <id>http://BobbyTang.github.io/blog/2014/01/01/first-post</id>
    <content type="html"><![CDATA[<h1>MarkDown Template</h1>

<h2>Blockquotes</h2>

<blockquote><h2>Header inside blockquote</h2>

<ol>
<li> This is the first list item.</li>
<li> This is the second list item.</li>
</ol>


<blockquote><p> This is nested blockquote.</p></blockquote>

<p>Here&rsquo;s some example code:</p>

<pre><code>return shell_exec("echo $input | $markdown_script");
</code></pre></blockquote>

<h2>List</h2>

<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.
Unordered lists use asterisks, pluses, and hyphens — interchangably — as list markers:</p>

<ul>
<li>Red</li>
<li>Green</li>
<li><p>Blue</p></li>
<li><p>Bird</p></li>
<li>McHale</li>
<li>Parish</li>
</ul>


<p>To put a code block within a list item, the code block needs to be indented twice — 8 spaces or two tabs:
* A list item with a code block:</p>

<pre><code>    &lt;codes goes here with two leading tabs&gt;
</code></pre>

<h2>Code Blocks</h2>

<p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:</p>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<hr />

<hr />

<h2>Links</h2>

<h3>inline links</h3>

<p>This is <a href="http://example.com/" title="Title">an example</a> inline link.
See my <a href="http://BobbyTang.github.io/about/">About</a> page for details.</p>

<h3>reference links</h3>

<p>This is <a href="../images/email.png" title="Optional title attribute">an example</a> reference-style link.</p>

<h3>implicit link</h3>

<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from
<a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>

<h2>Emphasis</h2>

<p>un<em>frigging</em>believable</p>

<p>*this text is surrounded by literal asterisks*</p>

<h2>Code</h2>

<p>Use the <code>printf()</code> function.
<code>There is a literal backtick (`) here.</code>
Please don&rsquo;t use any <code>&lt;blink&gt;</code> tags.</p>

<h2>Images</h2>

<p><img src="http://BobbyTang.github.io/path/to/img.jpg" title="Optional title" alt="Alt text" /></p>

<p><img src="../images/email.png" title="Optional title attribute" alt="Alt text" /></p>

<h2>Miscellaneous</h2>

<h3>Automatic link</h3>

<p><a href="http://example.com/">http://example.com/</a>
<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x61;&#100;&#100;&#114;&#x65;&#x73;&#115;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;">&#x61;&#100;&#100;&#114;&#101;&#115;&#115;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#109;</a></p>

<h3>Blackslash escapes</h3>

<pre><code>\   backslash
`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
+   plus sign
-   minus sign (hyphen)
.   dot
!   exclamation mark
</code></pre>

<h6>This is an H6</h6>
]]></content>
  </entry>
  
</feed>
